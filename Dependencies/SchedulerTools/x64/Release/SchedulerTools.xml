<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SchedulerTools</name>
    </assembly>
    <members>
        <member name="T:SchedulerTools.AddTaskFailedException">
            <summary>
            Represents an exception thrown when the API could not create the icon.
            </summary>
        </member>
        <member name="M:SchedulerTools.AddTaskFailedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SchedulerTools.AddTaskFailedException"/> class.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:SchedulerTools.Scheduler">
            <summary>
            Represents a manager for scheduled Windows tasks.
            </summary>
        </member>
        <member name="M:SchedulerTools.Scheduler.AddTask(System.String,System.String,SchedulerTools.TaskRunLevel)">
            <summary>
            Adds a task that will launch a program every time someone logs in. The program must have privilege 'AsInvoker' and NOT 'Highest'.
            </summary>
            <param name="taskName">Task name, whatever you want that can be a file name.</param>
            <param name="exeName">The full path to the program to launch.</param>
            <param name="runLevel">The program privilege when launched.</param>
            <returns>True if successful; otherwise, false.</returns>
        </member>
        <member name="M:SchedulerTools.Scheduler.IsTaskActive(System.String)">
            <summary>
            Check if a particular task is active, by its executable name.
            </summary>
            <param name="exeName">Task executable name.</param>
            <returns>True if active; otherwise, false.</returns>
        </member>
        <member name="M:SchedulerTools.Scheduler.RemoveTask(System.String,System.Boolean@)">
            <summary>
            Remove an active task.
            </summary>
            <param name="exeName">Task executable name.</param>
            <param name="isFound">True if found (and removed), false if not found.</param>
        </member>
        <member name="T:SchedulerTools.TaskRunLevel">
            <summary>
            The program privilege when launched.
            </summary>
        </member>
        <member name="F:SchedulerTools.TaskRunLevel.LUA">
            <summary>
            Tasks will be run with the least privileges.
            </summary>
        </member>
        <member name="F:SchedulerTools.TaskRunLevel.Highest">
            <summary>
            Tasks will be run with the highest privileges.
            </summary>
        </member>
    </members>
</doc>
