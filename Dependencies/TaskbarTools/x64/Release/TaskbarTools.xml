<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskbarTools</name>
    </assembly>
    <members>
        <member name="T:TaskbarTools.IconCreationFailedException">
            <summary>
            Represents an exception thrown when the API could not create the icon.
            </summary>
        </member>
        <member name="M:TaskbarTools.IconCreationFailedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskbarTools.IconCreationFailedException"/> class.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:TaskbarTools.InvalidCommandException">
            <summary>
            Represents an exception thrown when an invalid command is provided as a parameter to vaious public methods of the API.
            For instance: <see cref="M:TaskbarTools.TaskbarIcon.ToggleMenuCheck(System.Windows.Input.ICommand,System.Boolean@)"/>, <see cref="M:TaskbarTools.TaskbarIcon.IsMenuChecked(System.Windows.Input.ICommand)"/> and so on.
            </summary>
        </member>
        <member name="M:TaskbarTools.InvalidCommandException.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskbarTools.InvalidCommandException"/> class.
            </summary>
            <param name="command">The invalid command.</param>
        </member>
        <member name="P:TaskbarTools.InvalidCommandException.Command">
            <summary>
            Gets the invalid command.
            </summary>
        </member>
        <member name="T:TaskbarTools.TaskbarIcon">
            <summary>
            Represents a custom icon added to the taskbar.
            </summary>
        </member>
        <member name="P:TaskbarTools.TaskbarIcon.Empty">
            <summary>
            Gets the neutral, empty icon instance for code with nullable enabled.
            </summary>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.#ctor(System.Windows.Forms.NotifyIcon,System.Windows.IInputElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskbarTools.TaskbarIcon"/> class.
            </summary>
            <param name="notifyIcon">The system icon instance.</param>
            <param name="target">The target input element for menu interaction. Can be null.</param>
        </member>
        <member name="P:TaskbarTools.TaskbarIcon.ActiveIconList">
            <summary>
            Gets the list of icons added to the taskbar with this API.
            </summary>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.Create(System.Drawing.Icon,System.String,System.Windows.Controls.ContextMenu,System.Windows.IInputElement)">
            <summary>
            Create and display a taskbar icon.
            </summary>
            <param name="icon">The icon displayed.</param>
            <param name="toolTipText">The text shown when the mouse is over the icon, can be null.</param>
            <param name="menu">The menu that pops up when the user left click the icon, can be null.</param>
            <param name="target">The object that receives command notifications, can be null.</param>
            <returns>The created taskbar icon object.</returns>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.ToggleMenuCheck(System.Windows.Input.ICommand,System.Boolean@)">
            <summary>
            Toggles the check mark of a menu item.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="isChecked">The new value of the check mark.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.IsMenuChecked(System.Windows.Input.ICommand)">
            <summary>
            Returns the current check mark of a menu item.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <returns>True if the menu item has a check mark, false otherwise.</returns>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuCheck(System.Windows.Input.ICommand,System.Boolean)">
            <summary>
            Set the check mark of a menu item. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="isChecked">True if the menu item must have a check mark, false otherwise.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuText(System.Windows.Input.ICommand,System.String)">
            <summary>
            Set the text of menu item. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="text">The new menu item text.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuIsEnabled(System.Windows.Input.ICommand,System.Boolean)">
            <summary>
            Enable or disable the menu item. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="isEnabled">True if enabled.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuIsVisible(System.Windows.Input.ICommand,System.Boolean)">
            <summary>
            Show or hide the menu item. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="isVisible">True to show the menu item.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuIcon(System.Windows.Input.ICommand,System.Drawing.Icon)">
            <summary>
            Set the menu item icon. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="icon">The icon to set, null for no icon.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.SetMenuIcon(System.Windows.Input.ICommand,System.Drawing.Bitmap)">
            <summary>
            Set the menu item icon. This can be called within a handler of the <see cref="E:TaskbarTools.TaskbarIcon.MenuOpening"/> event, the change is applied as the menu pops up.
            </summary>
            <param name="command">The command associated to the menu item.</param>
            <param name="bitmap">The icon to set, as a bitmap, null for no icon.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.UpdateIcon(System.Drawing.Icon)">
            <summary>
            Change the taskbar icon.
            </summary>
            <param name="icon">The icon displayed.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.UpdateToolTipText(System.String)">
            <summary>
            Set the tool tip text displayed when the mouse is over the taskbar icon.
            </summary>
            <param name="toolTipText">The new tool tip text.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.PrepareMenuItem(System.Windows.Controls.MenuItem,System.Boolean,System.Boolean)">
            <summary>
            Prepares a menu item before is is added to a menu, before calling <see cref="M:TaskbarTools.TaskbarIcon.Create(System.Drawing.Icon,System.String,System.Windows.Controls.ContextMenu,System.Windows.IInputElement)"/>.
            This method is required only if either <paramref>IsVisible</paramref> or <paramref>IsEnabled</paramref> is false.
            </summary>
            <param name="item">The modified menu item.</param>
            <param name="isVisible">True if the menu should be visible.</param>
            <param name="isEnabled">True if the menu should be enabled.</param>
        </member>
        <member name="E:TaskbarTools.TaskbarIcon.MenuOpening">
            <summary>
            Event raised before the menu pops up.
            </summary>
        </member>
        <member name="E:TaskbarTools.TaskbarIcon.IconClicked">
            <summary>
            Event raised when the icon is clicked.
            </summary>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.Dispose(System.Boolean)">
            <summary>
            Called when an object should release its resources.
            </summary>
            <param name="isDisposing">Indicates if resources must be disposed now.</param>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.Dispose">
            <summary>
            Called when an object should release its resources.
            </summary>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TaskbarTools.TaskbarIcon"/> class.
            </summary>
        </member>
        <member name="F:TaskbarTools.TaskbarIcon.IsDisposed">
            <summary>
            True after <see cref="M:TaskbarTools.TaskbarIcon.Dispose(System.Boolean)"/> has been invoked.
            </summary>
        </member>
        <member name="M:TaskbarTools.TaskbarIcon.DisposeNow">
            <summary>
            Disposes of every reference that must be cleaned up.
            </summary>
        </member>
    </members>
</doc>
